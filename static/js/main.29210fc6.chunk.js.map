{"version":3,"sources":["components/Card.js","components/CardList.js","components/SearchBox.js","components/Scroll.js","components/ErrorBoundry.js","components/Title.js","store/constants.js","store/actions.js","containers/App.js","serviceWorkerRegistration.js","store/reducers.js","index.js"],"names":["Card","name","email","id","className","src","alt","CardList","data","map","SearchBox","memo","searchChange","type","placeholder","onChange","Scroll","props","children","ErrorBoundry","state","hasError","this","setState","Component","Title","context","CHANGE_SEARCH_FIELD","FETCH_KITTIES_PENDING","FETCH_KITTIES_SUCCESS","FETCH_KITTIES_fAILED","fetchKitties","dispatch","a","fetch","response","json","payload","connect","searchField","searchKitties","kitties","isPending","error","onSearchChange","event","text","target","value","onFetchKitties","useEffect","filteredKitties","filter","kitty","toLowerCase","includes","href","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","onUpdate","onSuccess","catch","searchInitialState","kittiesInitialState","rootReduce","combineReducers","action","store","createStore","applyMiddleware","thunkMiddleware","ReactDOM","render","StrictMode","document","getElementById","URL","process","origin","addEventListener","headers","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker","serviceWorkerRegistration"],"mappings":"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","file":"static/js/main.29210fc6.chunk.js","sourcesContent":["import React from 'react'\n\nconst Card = ({ name, email, id }) => {\n  return (\n    <div className=\"flex flex-col items-center p-5 rounded-lg shadow-lg transition-transform hover:scale-110 bg-gray-800 text-gray-400\">\n      <img\n        className=\"w-44 h-44\"\n        src={`https://robohash.org/${id}?set=set4&size=200x200`}\n        alt=\"kitty\"\n      />\n      <div className=\"flex flex-col items-center\">\n        <h2 className=\"pt-2 font-bold text-xl\">{name}</h2>\n        <p>{email}</p>\n      </div>\n    </div>\n  )\n}\n\nexport default Card\n","import React from 'react'\nimport Card from './Card'\n\nconst CardList = ({ data }) => {\n  return (\n    <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4 justify-center\">\n      {data.map(({ id, name, email }) => {\n        return <Card id={id} name={name} email={email} key={id} />\n      })}\n    </div>\n  )\n}\n\nexport default CardList\n","import { memo } from 'react'\n\nconst SearchBox = memo(({ searchChange }) => {\n  return (\n    <>\n      <input\n        className=\"inline-flex p-3 rounded-lg text-gray-300 border-2 border-gray-800 w-full md:w-2/3 lg:w-1/3 focus:outline-none focus:ring focus:border-gray-800 bg-gray-700\"\n        type=\"search\"\n        placeholder=\"Search for a kitty...\"\n        onChange={searchChange}\n      />\n    </>\n  )\n})\n\nexport default SearchBox\n","import React from 'react'\n\nconst Scroll = (props) => {\n  return <div>{props.children}</div>\n}\n\nexport default Scroll\n","import React, { Component } from 'react'\n\nclass ErrorBoundry extends Component {\n  constructor(props) {\n    super(props)\n    this.state = {\n      hasError: false\n    }\n  }\n\n  // This is like `try catch`\n  componentDidCatch() {\n    this.setState({ hasError: true })\n  }\n\n  render() {\n    if (this.state.hasError) {\n      return <h1>Oops. That is not good :(</h1>\n    } else {\n      return this.props.children\n    }\n  }\n}\n\nexport default ErrorBoundry\n","import { memo } from 'react'\n\nconst Title = memo(({ context }) => {\n  return (\n    <h1 className=\"main-title text-5xl text-gray-100 mb-8 mt-6\">{context}</h1>\n  )\n})\n\nexport default Title\n","export const CHANGE_SEARCH_FIELD = 'CHANGE_SEARCH_FIELD'\n\nexport const FETCH_KITTIES_PENDING = 'FETCH_KITTIES_PENDING'\nexport const FETCH_KITTIES_SUCCESS = 'FETCH_KITTIES_SUCCESS'\nexport const FETCH_KITTIES_fAILED = 'FETCH_KITTIES_fAILED'\n","import {\n  CHANGE_SEARCH_FIELD,\n  FETCH_KITTIES_PENDING,\n  FETCH_KITTIES_SUCCESS,\n  FETCH_KITTIES_fAILED\n} from './constants'\n\nexport const setSearchField = (text) => ({\n  type: CHANGE_SEARCH_FIELD,\n  payload: text\n})\n\nexport const fetchKitties = async (dispatch) => {\n  dispatch({ type: FETCH_KITTIES_PENDING })\n  try {\n    const response = await fetch('https://jsonplaceholder.typicode.com/users')\n    const data = await response.json()\n    dispatch({ type: FETCH_KITTIES_SUCCESS, payload: data })\n  } catch (e) {\n    dispatch({ type: FETCH_KITTIES_fAILED, payload: e })\n  }\n}\n","import React, { useEffect } from 'react'\nimport { connect } from 'react-redux'\n\nimport CardList from '../components/CardList'\nimport SearchBox from '../components/SearchBox'\nimport Scroll from '../components/Scroll'\nimport ErrorBoundry from '../components/ErrorBoundry'\nimport Title from '../components/Title'\n\nimport { setSearchField, fetchKitties } from '../store/actions'\n\n// Set state mapper to map out the state into the props\nconst mapStateToProps = (state) => {\n  return {\n    searchField: state.searchKitties.searchField,\n    kitties: state.fetchKitties.kitties,\n    isPending: state.fetchKitties.isPending,\n    error: state.fetchKitties.error\n  }\n}\n\n// Set dispatch actions to change state\nconst mapDispatchToProps = (dispatch) => {\n  return {\n    onSearchChange: (event) => dispatch(setSearchField(event.target.value)),\n    onFetchKitties: () => dispatch(fetchKitties)\n  }\n}\n\nconst App = (props) => {\n  const { searchField, onSearchChange, kitties, isPending, onFetchKitties } =\n    props\n\n  // Mounted life cycle\n  useEffect(() => {\n    onFetchKitties()\n  }, [onFetchKitties])\n\n  const filteredKitties = kitties.filter((kitty) => {\n    return kitty.name.toLowerCase().includes(searchField.toLowerCase())\n  })\n\n  return (\n    <div className=\"block w-full px-6\">\n      <div className=\"max-w-4xl lg:max-w-6xl mx-auto pb-12 py-6\">\n        <div className=\"flex flex-col justify-center items-center my-6\">\n          {isPending ? (\n            <Title context=\"Loading...\" />\n          ) : (\n            <>\n              <Title context=\"Kitty Friends\" />\n              <SearchBox searchChange={onSearchChange} />\n            </>\n          )}\n        </div>\n        <Scroll>\n          <ErrorBoundry>\n            <CardList data={filteredKitties} />\n          </ErrorBoundry>\n        </Scroll>\n        <div className=\"flex flex-col items-center mt-10 text-gray-400 text-lg\">\n          <p>\n            Made with 💎 by\n            <a href=\"https://github.com/TriDiamond\"> Tridiamond</a>\n          </p>\n          <p>Build with React + Redux</p>\n        </div>\n      </div>\n    </div>\n  )\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App)\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://cra.link/PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n)\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href)\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config)\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://cra.link/PWA'\n          )\n        })\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config)\n      }\n    })\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing\n        if (installingWorker == null) {\n          return\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://cra.link/PWA.'\n              )\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration)\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.')\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration)\n              }\n            }\n          }\n        }\n      }\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error)\n    })\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type')\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload()\n          })\n        })\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config)\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      )\n    })\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister()\n      })\n      .catch((error) => {\n        console.error(error.message)\n      })\n  }\n}\n","import {\n  CHANGE_SEARCH_FIELD,\n  FETCH_KITTIES_PENDING,\n  FETCH_KITTIES_SUCCESS,\n  FETCH_KITTIES_fAILED\n} from './constants'\n\nconst searchInitialState = {\n  searchField: ''\n}\n\nconst kittiesInitialState = {\n  isPending: false,\n  kitties: [],\n  error: ''\n}\n\nexport const searchKitties = (state = searchInitialState, action = {}) => {\n  switch (action.type) {\n    case CHANGE_SEARCH_FIELD:\n      return { ...state, searchField: action.payload }\n    default:\n      return state\n  }\n}\n\nexport const fetchKitties = (state = kittiesInitialState, action = {}) => {\n  switch (action.type) {\n    case FETCH_KITTIES_PENDING:\n      return { ...state, isPending: true }\n    case FETCH_KITTIES_SUCCESS:\n      return { ...state, kitties: action.payload, isPending: false }\n    case FETCH_KITTIES_fAILED:\n      return { ...state, isPending: false, error: action.payload }\n    default:\n      return state\n  }\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport { Provider } from 'react-redux'\nimport { createStore, applyMiddleware, combineReducers } from 'redux'\n// import { createLogger } from 'redux-logger'\nimport thunkMiddleware from 'redux-thunk'\nimport './index.css'\nimport App from './containers/App'\n\nimport * as serviceWorkerRegistration from './serviceWorkerRegistration'\n// import reportWebVitals from './reportWebVitals'\n\nimport { searchKitties, fetchKitties } from './store/reducers'\n\nif (process.env.NODE_ENV === 'development') {\n  const whyDidYouRender = require('@welldone-software/why-did-you-render')\n  whyDidYouRender(React, {\n    trackAllPureComponents: true\n  })\n}\n\n// Redux logger middleware\n// --> Monitor your Redux states, actions, dipatches\n// const logger = createLogger()\n\nconst rootReduce = combineReducers({ searchKitties, fetchKitties })\nconst store = createStore(rootReduce, applyMiddleware(thunkMiddleware))\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n)\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://cra.link/PWA\nserviceWorkerRegistration.register()\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n// reportWebVitals()\n"],"sourceRoot":""}